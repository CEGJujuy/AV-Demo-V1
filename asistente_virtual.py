# Importamos todas las librer√≠as necesarias
import tkinter as tk  # Librer√≠a est√°ndar de Python para crear interfaces gr√°ficas
from tkinter import scrolledtext, messagebox  # Widgets adicionales para texto con scroll y mensajes emergentes
import random  # Nos servir√° para seleccionar respuestas al azar
import datetime  # Permite trabajar la hora y fecha actual
import json  # Para guardar las consultas no reconocidas
import os  # Para manejo de archivos

# Definimos la clase "Asistente Virtual"
class AsistenteVirtual:
    def __init__(self):
        # Creamos la Pantalla Principal
        self.ventana = tk.Tk()
        self.ventana.title("Asistente Virtual - Estudiantes de Secundaria")
        self.ventana.geometry("700x600")
        self.ventana.configure(bg="#f0f0f0")

        # Lista para almacenar consultas no reconocidas
        self.consultas_no_reconocidas = []
        self.archivo_consultas = "consultas_pendientes.json"
        
        # Cargar consultas pendientes previas
        self.cargar_consultas_pendientes()

        # Organizamos el Diccionario de respuestas por categor√≠as
        self.respuestas = {
            "saludo": [
                "¬°Hola! Soy tu asistente virtual. ¬øEn qu√© puedo ayudarte hoy?",
                "¬°Hola! ¬øC√≥mo est√°s? ¬øNecesitas ayuda con algo?",
                "¬°Saludos! Estoy aqu√≠ para ayudarte con tus estudios."
            ],
            "matematicas": [
                "Las matem√°ticas son fundamentales. ¬øNecesitas ayuda con √°lgebra, geometr√≠a o aritm√©tica?",
                "Para resolver ecuaciones, recuerda: lo que haces de un lado, hazlo del otro.",
                "En geometr√≠a, recuerda las f√≥rmulas b√°sicas: √°rea del c√≠rculo = œÄ √ó r¬≤, √°rea del rect√°ngulo = base √ó altura.",
                "Los n√∫meros negativos: cuando multiplicas dos negativos, el resultado es positivo.",
                "Para factorizar, busca primero el factor com√∫n m√°s grande."
            ],
            "ciencias": [
                "Las ciencias nos ayudan a entender el mundo. ¬øTe interesa biolog√≠a, qu√≠mica o f√≠sica?",
                "En biolog√≠a, recuerda que la c√©lula es la unidad b√°sica de la vida.",
                "En qu√≠mica, los elementos se organizan en la tabla peri√≥dica seg√∫n su n√∫mero at√≥mico.",
                "En f√≠sica, velocidad = distancia / tiempo. Esta es una f√≥rmula fundamental.",
                "La fotos√≠ntesis: CO‚ÇÇ + H‚ÇÇO + luz solar ‚Üí glucosa + O‚ÇÇ"
            ],
            "historia": [
                "La historia nos ense√±a sobre el pasado para entender el presente.",
                "Es importante estudiar las fechas clave y entender las causas y consecuencias de los eventos.",
                "Hacer l√≠neas de tiempo te ayudar√° a organizar mejor los eventos hist√≥ricos.",
                "Conecta los eventos hist√≥ricos con sus contextos sociales, econ√≥micos y pol√≠ticos."
            ],
            "lengua": [
                "La lengua y literatura desarrollan tu capacidad de comunicaci√≥n.",
                "Lee mucho para mejorar tu vocabulario y comprensi√≥n lectora.",
                "Practica la escritura diariamente para mejorar tu redacci√≥n.",
                "Los conectores dan coherencia a tus textos: adem√°s, sin embargo, por lo tanto..."
            ],
            "ingles": [
                "El ingl√©s es fundamental en el mundo globalizado. ¬øNecesitas ayuda con gram√°tica o vocabulario?",
                "Para mejorar tu ingl√©s: lee, escucha m√∫sica, ve pel√≠culas con subt√≠tulos.",
                "Los tiempos verbales b√°sicos: Present Simple, Past Simple, Future Simple.",
                "Phrasal verbs son muy importantes: get up, turn on, look for, etc."
            ],
            "geografia": [
                "La geograf√≠a estudia la Tierra y la relaci√≥n entre el ser humano y su entorno.",
                "Aprende los continentes, oc√©anos, pa√≠ses y capitales principales.",
                "El clima se ve afectado por la latitud, altitud, corrientes marinas y vientos."
            ],
            "consejos_estudio": [
                "Crea un horario de estudio y s√≠guelo consistentemente.",
                "Encuentra un lugar tranquilo y bien iluminado para estudiar.",
                "Toma descansos cada 45-60 minutos para mantener la concentraci√≥n.",
                "Usa t√©cnicas como mapas mentales y res√∫menes para organizar la informaci√≥n.",
                "La t√©cnica Pomodoro: 25 minutos de estudio, 5 minutos de descanso."
            ],
            "examenes": [
                "Para preparar ex√°menes: planifica con tiempo, no dejes todo para √∫ltimo momento.",
                "Haz un cronograma de repaso distribuyendo las materias por d√≠as.",
                "Practica con ex√°menes anteriores o ejercicios similares.",
                "Durante el examen: lee bien las preguntas, administra tu tiempo."
            ],
            "motivacion": [
                "¬°T√∫ puedes lograrlo! Cada peque√±o esfuerzo cuenta.",
                "Los errores son oportunidades de aprendizaje, no te desanimes.",
                "El √©xito viene de la constancia y la dedicaci√≥n.",
                "Celebra tus peque√±os logros, son importantes para tu progreso.",
                "Recuerda por qu√© empezaste y mant√©n tus metas claras."
            ],
            "despedida": [
                "¬°Hasta luego! Que tengas un excelente d√≠a de estudio.",
                "¬°Nos vemos! Recuerda que siempre estoy aqu√≠ para ayudarte.",
                "¬°Adi√≥s! Sigue esforz√°ndote, vas por buen camino."
            ]
        }

        # Establecemos el Diccionario que relaciona palabras clave y categor√≠as
        self.palabras_clave = {
            "hola": "saludo",
            "buenos d√≠as": "saludo",
            "buenas tardes": "saludo",
            "buenas noches": "saludo",
            "hey": "saludo",
            "saludos": "saludo",
            "matem√°ticas": "matematicas",
            "mates": "matematicas",
            "√°lgebra": "matematicas",
            "geometr√≠a": "matematicas",
            "n√∫meros": "matematicas",
            "ecuaciones": "matematicas",
            "c√°lculo": "matematicas",
            "trigonometr√≠a": "matematicas",
            "ciencias": "ciencias",
            "biolog√≠a": "ciencias",
            "qu√≠mica": "ciencias",
            "f√≠sica": "ciencias",
            "laboratorio": "ciencias",
            "experimento": "ciencias",
            "historia": "historia",
            "hist√≥rico": "historia",
            "pasado": "historia",
            "guerra": "historia",
            "revoluci√≥n": "historia",
            "lengua": "lengua",
            "literatura": "lengua",
            "espa√±ol": "lengua",
            "escribir": "lengua",
            "leer": "lengua",
            "redacci√≥n": "lengua",
            "gram√°tica": "lengua",
            "ingl√©s": "ingles",
            "english": "ingles",
            "pronunciaci√≥n": "ingles",
            "vocabulario": "ingles",
            "geograf√≠a": "geografia",
            "mapas": "geografia",
            "pa√≠ses": "geografia",
            "continentes": "geografia",
            "clima": "geografia",
            "estudiar": "consejos_estudio",
            "estudio": "consejos_estudio",
            "concentraci√≥n": "consejos_estudio",
            "horario": "consejos_estudio",
            "t√©cnicas": "consejos_estudio",
            "ex√°menes": "examenes",
            "examen": "examenes",
            "prueba": "examenes",
            "evaluaci√≥n": "examenes",
            "motivaci√≥n": "motivacion",
            "√°nimo": "motivacion",
            "desanimado": "motivacion",
            "dif√≠cil": "motivacion",
            "cansado": "motivacion",
            "estr√©s": "motivacion",
            "adi√≥s": "despedida",
            "hasta luego": "despedida",
            "chau": "despedida",
            "bye": "despedida",
            "nos vemos": "despedida"
        }

        # Se crea la interfaz gr√°fica
        self.crear_interfaz()

    def cargar_consultas_pendientes(self):
        """Cargar consultas pendientes desde archivo JSON"""
        try:
            if os.path.exists(self.archivo_consultas):
                with open(self.archivo_consultas, 'r', encoding='utf-8') as archivo:
                    self.consultas_no_reconocidas = json.load(archivo)
        except Exception as e:
            print(f"Error al cargar consultas pendientes: {e}")
            self.consultas_no_reconocidas = []

    def guardar_consultas_pendientes(self):
        """Guardar consultas pendientes en archivo JSON"""
        try:
            with open(self.archivo_consultas, 'w', encoding='utf-8') as archivo:
                json.dump(self.consultas_no_reconocidas, archivo, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error al guardar consultas pendientes: {e}")

    def enviar_alerta_docente(self, consulta):
        """Funci√≥n para enviar alerta al docente sobre consulta no reconocida"""
        consulta_info = {
            "mensaje": consulta,
            "fecha": datetime.datetime.now().strftime("%d/%m/%Y"),
            "hora": datetime.datetime.now().strftime("%H:%M:%S"),
            "timestamp": datetime.datetime.now().isoformat(),
            "estado": "pendiente"
        }
        
        # Agregar a la lista de consultas no reconocidas
        self.consultas_no_reconocidas.append(consulta_info)
        
        # Guardar en archivo
        self.guardar_consultas_pendientes()
        
        # Mostrar alerta visual al docente
        self.mostrar_alerta_docente(consulta_info)
        
        # Log para el sistema
        print(f"üö® ALERTA DOCENTE - Nueva consulta no reconocida:")
        print(f"   Mensaje: {consulta}")
        print(f"   Fecha: {consulta_info['fecha']} - Hora: {consulta_info['hora']}")
        print(f"   Total consultas pendientes: {len(self.consultas_no_reconocidas)}")

    def mostrar_alerta_docente(self, consulta_info):
        """Mostrar ventana de alerta para el docente"""
        ventana_alerta = tk.Toplevel(self.ventana)
        ventana_alerta.title("üö® Alerta Docente - Nueva Consulta")
        ventana_alerta.geometry("500x300")
        ventana_alerta.configure(bg="#fff3cd")
        ventana_alerta.transient(self.ventana)
        ventana_alerta.grab_set()
        
        # Centrar la ventana
        ventana_alerta.geometry("+%d+%d" % (self.ventana.winfo_rootx() + 50, self.ventana.winfo_rooty() + 50))
        
        # T√≠tulo
        titulo = tk.Label(ventana_alerta, text="üö® NUEVA CONSULTA PENDIENTE", 
                         font=("Arial", 14, "bold"), bg="#fff3cd", fg="#856404")
        titulo.pack(pady=10)
        
        # Informaci√≥n de la consulta
        info_frame = tk.Frame(ventana_alerta, bg="#fff3cd")
        info_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
        
        tk.Label(info_frame, text="üìù Consulta del estudiante:", 
                font=("Arial", 10, "bold"), bg="#fff3cd", fg="#856404").pack(anchor=tk.W)
        
        consulta_text = tk.Text(info_frame, height=4, font=("Arial", 10), 
                               bg="white", fg="black", wrap=tk.WORD)
        consulta_text.insert(tk.END, f'"{consulta_info["mensaje"]}"')
        consulta_text.config(state=tk.DISABLED)
        consulta_text.pack(fill=tk.BOTH, expand=True, pady=5)
        
        tk.Label(info_frame, text=f"‚è∞ Fecha y hora: {consulta_info['fecha']} - {consulta_info['hora']}", 
                font=("Arial", 9), bg="#fff3cd", fg="#856404").pack(anchor=tk.W, pady=5)
        
        # Botones
        botones_frame = tk.Frame(ventana_alerta, bg="#fff3cd")
        botones_frame.pack(pady=10)
        
        btn_ver_todas = tk.Button(botones_frame, text="üìã Ver Todas las Consultas", 
                                 font=("Arial", 9, "bold"), bg="#17a2b8", fg="white",
                                 command=lambda: self.abrir_panel_docente())
        btn_ver_todas.pack(side=tk.LEFT, padx=5)
        
        btn_cerrar = tk.Button(botones_frame, text="‚úÖ Entendido", 
                              font=("Arial", 9, "bold"), bg="#28a745", fg="white",
                              command=ventana_alerta.destroy)
        btn_cerrar.pack(side=tk.LEFT, padx=5)

    def abrir_panel_docente(self):
        """Abrir panel de administraci√≥n para docentes"""
        ventana_docente = tk.Toplevel(self.ventana)
        ventana_docente.title("üë®‚Äçüè´ Panel Docente - Consultas Pendientes")
        ventana_docente.geometry("700x500")
        ventana_docente.configure(bg="#f8f9fa")
        
        # T√≠tulo
        titulo = tk.Label(ventana_docente, text="üë®‚Äçüè´ PANEL DOCENTE", 
                         font=("Arial", 16, "bold"), bg="#f8f9fa", fg="#2c3e50")
        titulo.pack(pady=10)
        
        # Frame principal
        main_frame = tk.Frame(ventana_docente, bg="#f8f9fa")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Lista de consultas
        consultas_frame = tk.LabelFrame(main_frame, text="üìã Consultas Pendientes", 
                                       font=("Arial", 12, "bold"), bg="#f8f9fa", fg="#2c3e50")
        consultas_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # √Årea de texto con scroll para mostrar consultas
        self.texto_consultas = scrolledtext.ScrolledText(consultas_frame, width=80, height=15, 
                                                        font=("Arial", 10), bg="white", fg="black")
        self.texto_consultas.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # Botones de control
        botones_frame = tk.Frame(main_frame, bg="#f8f9fa")
        botones_frame.pack(fill=tk.X, pady=10)
        
        btn_actualizar = tk.Button(botones_frame, text="üîÑ Actualizar Lista", 
                                  font=("Arial", 10, "bold"), bg="#007bff", fg="white",
                                  command=self.actualizar_lista_consultas)
        btn_actualizar.pack(side=tk.LEFT, padx=5)
        
        btn_marcar_todas = tk.Button(botones_frame, text="‚úÖ Marcar Todas como Resueltas", 
                                    font=("Arial", 10, "bold"), bg="#28a745", fg="white",
                                    command=self.marcar_todas_resueltas)
        btn_marcar_todas.pack(side=tk.LEFT, padx=5)
        
        btn_exportar = tk.Button(botones_frame, text="üìÑ Exportar Consultas", 
                                font=("Arial", 10, "bold"), bg="#ffc107", fg="black",
                                command=self.exportar_consultas)
        btn_exportar.pack(side=tk.LEFT, padx=5)
        
        # Cargar consultas inicialmente
        self.actualizar_lista_consultas()

    def actualizar_lista_consultas(self):
        """Actualizar la lista de consultas en el panel docente"""
        self.texto_consultas.config(state=tk.NORMAL)
        self.texto_consultas.delete(1.0, tk.END)
        
        if not self.consultas_no_reconocidas:
            self.texto_consultas.insert(tk.END, "‚úÖ No hay consultas pendientes.\n\n")
        else:
            self.texto_consultas.insert(tk.END, f"üìä TOTAL DE CONSULTAS PENDIENTES: {len(self.consultas_no_reconocidas)}\n")
            self.texto_consultas.insert(tk.END, "=" * 70 + "\n\n")
            
            for i, consulta in enumerate(self.consultas_no_reconocidas, 1):
                self.texto_consultas.insert(tk.END, f"üî∏ CONSULTA #{i}\n")
                self.texto_consultas.insert(tk.END, f"üìÖ Fecha: {consulta['fecha']} - ‚è∞ Hora: {consulta['hora']}\n")
                self.texto_consultas.insert(tk.END, f"üìù Mensaje: \"{consulta['mensaje']}\"\n")
                self.texto_consultas.insert(tk.END, f"üìä Estado: {consulta['estado'].upper()}\n")
                self.texto_consultas.insert(tk.END, "-" * 50 + "\n\n")
        
        self.texto_consultas.config(state=tk.DISABLED)

    def marcar_todas_resueltas(self):
        """Marcar todas las consultas como resueltas"""
        if self.consultas_no_reconocidas:
            respuesta = messagebox.askyesno("Confirmar", 
                                          f"¬øEst√°s seguro de marcar las {len(self.consultas_no_reconocidas)} consultas como resueltas?")
            if respuesta:
                self.consultas_no_reconocidas.clear()
                self.guardar_consultas_pendientes()
                self.actualizar_lista_consultas()
                messagebox.showinfo("√âxito", "Todas las consultas han sido marcadas como resueltas.")
        else:
            messagebox.showinfo("Informaci√≥n", "No hay consultas pendientes.")

    def exportar_consultas(self):
        """Exportar consultas a un archivo de texto"""
        if not self.consultas_no_reconocidas:
            messagebox.showinfo("Informaci√≥n", "No hay consultas para exportar.")
            return
        
        try:
            nombre_archivo = f"consultas_export_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(nombre_archivo, 'w', encoding='utf-8') as archivo:
                archivo.write("REPORTE DE CONSULTAS PENDIENTES\n")
                archivo.write("=" * 50 + "\n\n")
                archivo.write(f"Fecha de exportaci√≥n: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                archivo.write(f"Total de consultas: {len(self.consultas_no_reconocidas)}\n\n")
                
                for i, consulta in enumerate(self.consultas_no_reconocidas, 1):
                    archivo.write(f"CONSULTA #{i}\n")
                    archivo.write(f"Fecha: {consulta['fecha']} - Hora: {consulta['hora']}\n")
                    archivo.write(f"Mensaje: \"{consulta['mensaje']}\"\n")
                    archivo.write(f"Estado: {consulta['estado']}\n")
                    archivo.write("-" * 30 + "\n\n")
            
            messagebox.showinfo("√âxito", f"Consultas exportadas exitosamente a: {nombre_archivo}")
        except Exception as e:
            messagebox.showerror("Error", f"Error al exportar consultas: {e}")

    def crear_interfaz(self):
        # Se Agrega el t√≠tulo en la ventana
        titulo = tk.Label(self.ventana, text="ü§ñ Asistente Virtual para Estudiantes", 
                         font=("Arial", 16, "bold"), bg="#f0f0f0", fg="#2c3e50")
        titulo.pack(pady=10)

        # Bot√≥n para panel docente
        btn_panel_docente = tk.Button(self.ventana, text="üë®‚Äçüè´ Panel Docente", 
                                     font=("Arial", 10, "bold"), bg="#dc3545", fg="white",
                                     command=self.abrir_panel_docente, cursor="hand2")
        btn_panel_docente.pack(pady=5)

        # Definimos el √Årea donde se mostrar√° la conversaci√≥n
        self.area_chat = scrolledtext.ScrolledText(self.ventana, width=80, height=20, 
                                                  font=("Arial", 10), bg="white", fg="black", 
                                                  state=tk.DISABLED)
        self.area_chat.pack(padx=10, pady=5, fill=tk.BOTH, expand=True)

        # Definimos el Marco para la entrada de texto y bot√≥n
        frame_entrada = tk.Frame(self.ventana, bg="#f0f0f0")
        frame_entrada.pack(fill=tk.X, padx=10, pady=5)

        # Definimos la Entrada para que el usuario ingrese las consultas
        self.entrada_texto = tk.Entry(frame_entrada, font=("Arial", 12), width=60)
        self.entrada_texto.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        self.entrada_texto.bind("<Return>", self.enviar_mensaje)

        # Definimos el Bot√≥n para enviar el mensaje
        boton_enviar = tk.Button(frame_entrada, text="Enviar", font=("Arial", 10, "bold"), 
                                bg="#3498db", fg="white", command=self.enviar_mensaje, cursor="hand2")
        boton_enviar.pack(side=tk.RIGHT)

        # Se establece el Marco para botones r√°pidos
        frame_botones = tk.Frame(self.ventana, bg="#f0f0f0")
        frame_botones.pack(fill=tk.X, padx=10, pady=5)

        # Definimos los Botones de ayuda r√°pida
        botones_ayuda = [
            ("üìö Consejos de Estudio", "consejos de estudio"),
            ("üí™ Motivaci√≥n", "necesito motivaci√≥n"),
            ("üî¢ Matem√°ticas", "ayuda con matem√°ticas"),
            ("üß™ Ciencias", "ayuda con ciencias"),
            ("üìñ Lengua", "ayuda con lengua"),
            ("üåç Geograf√≠a", "ayuda con geograf√≠a")
        ]
        
        for i, (texto, comando) in enumerate(botones_ayuda):
            boton = tk.Button(frame_botones, text=texto, font=("Arial", 8), 
                             bg="#ecf0f1", fg="#2c3e50", 
                             command=lambda cmd=comando: self.procesar_comando_rapido(cmd), 
                             cursor="hand2")
            boton.grid(row=i//3, column=i%3, padx=2, pady=2, sticky="ew")
        
        # Configurar columnas para que se expandan uniformemente
        for i in range(3):
            frame_botones.columnconfigure(i, weight=1)

        # Muestra del Mensaje inicial de bienvenida
        mensaje_bienvenida = ("¬°Hola! Soy tu asistente virtual educativo. Estoy aqu√≠ para ayudarte con tus estudios.\n\n"
                             "Puedes preguntarme sobre:\n"
                             "‚Ä¢ Matem√°ticas, Ciencias, Historia, Lengua, Ingl√©s, Geograf√≠a\n"
                             "‚Ä¢ Consejos de estudio y t√©cnicas de aprendizaje\n"
                             "‚Ä¢ Preparaci√≥n de ex√°menes\n"
                             "‚Ä¢ Motivaci√≥n y apoyo acad√©mico\n\n"
                             "Si tu consulta no est√° en mi base de conocimientos, "
                             "ser√° enviada autom√°ticamente a un docente para que te ayude.\n\n"
                             "¬°Empecemos!")
        
        self.mostrar_mensaje("Asistente", mensaje_bienvenida)
        self.entrada_texto.focus()

    def mostrar_mensaje(self, remitente, mensaje):
        # Habilita el √°rea para insertar texto
        self.area_chat.config(state=tk.NORMAL)
        hora = datetime.datetime.now().strftime("%H:%M")  # Hora actual
        if remitente == "T√∫":
            self.area_chat.insert(tk.END, f"[{hora}] {remitente}: {mensaje}\n", "usuario")
        else:
            self.area_chat.insert(tk.END, f"[{hora}] {remitente}: {mensaje}\n\n", "asistente")
        self.area_chat.config(state=tk.DISABLED)
        self.area_chat.see(tk.END)  # Baja el scroll al final

    def procesar_comando_rapido(self, comando):
        # Insertamos el comando directamente en el campo de entrada
        self.entrada_texto.delete(0, tk.END)
        self.entrada_texto.insert(0, comando)
        self.enviar_mensaje()

    def enviar_mensaje(self, event=None):
        mensaje = self.entrada_texto.get().strip()
        if not mensaje:
            return
        self.mostrar_mensaje("T√∫", mensaje)
        self.entrada_texto.delete(0, tk.END)
        respuesta = self.procesar_mensaje(mensaje)
        self.mostrar_mensaje("Asistente", respuesta)

    def procesar_mensaje(self, mensaje):
        mensaje_lower = mensaje.lower()
        
        # Buscar palabra clave
        categoria_encontrada = None
        for palabra_clave, categoria in self.palabras_clave.items():
            if palabra_clave in mensaje_lower:
                categoria_encontrada = categoria
                break
        
        # Si encontramos una categor√≠a, devolver respuesta aleatoria
        if categoria_encontrada and categoria_encontrada in self.respuestas:
            return random.choice(self.respuestas[categoria_encontrada])
        
        # Respuestas autom√°ticas espec√≠ficas
        if "hora" in mensaje_lower:
            return f"Son las {datetime.datetime.now().strftime('%H:%M')} horas."
        
        if "fecha" in mensaje_lower:
            return f"Hoy es {datetime.datetime.now().strftime('%d de %B de %Y')}."
        
        if "nombre" in mensaje_lower:
            return "Soy tu asistente virtual especializado en educaci√≥n secundaria. ¬°Estoy aqu√≠ para ayudarte!"
        
        if "materias" in mensaje_lower or "asignaturas" in mensaje_lower:
            return ("Puedo ayudarte con estas materias:\n\n"
                   "üìö Materias principales:\n"
                   "‚Ä¢ Matem√°ticas ‚Ä¢ Ciencias (Biolog√≠a, Qu√≠mica, F√≠sica)\n"
                   "‚Ä¢ Historia ‚Ä¢ Lengua y Literatura ‚Ä¢ Ingl√©s ‚Ä¢ Geograf√≠a\n\n"
                   "üéØ Apoyo acad√©mico:\n"
                   "‚Ä¢ T√©cnicas de estudio ‚Ä¢ Preparaci√≥n de ex√°menes\n"
                   "‚Ä¢ Organizaci√≥n del tiempo ‚Ä¢ Motivaci√≥n\n\n"
                   "¬°Usa los botones de ayuda r√°pida o escribe tu pregunta!")
        
        if "ayuda" in mensaje_lower or "help" in mensaje_lower:
            return ("¬°Estoy aqu√≠ para ayudarte! Puedo asistirte con:\n\n"
                   "üìö Todas las materias de secundaria\n"
                   "üéØ T√©cnicas de estudio y preparaci√≥n de ex√°menes\n"
                   "üí™ Motivaci√≥n y consejos acad√©micos\n\n"
                   "üí° C√≥mo usar el asistente:\n"
                   "‚Ä¢ Usa los botones de ayuda r√°pida\n"
                   "‚Ä¢ Escribe tu pregunta directamente\n"
                   "‚Ä¢ Si no puedo ayudarte, un docente ser√° notificado\n\n"
                   "¬°Estoy aqu√≠ para ayudarte a tener √©xito en tus estudios!")
        
        # Si llegamos aqu√≠, la consulta no fue reconocida
        # Enviar alerta al docente
        self.enviar_alerta_docente(mensaje)
        
        # Devolver mensaje de alerta al estudiante
        return (f"üîî Tu consulta ser√° evaluada por un Docente\n\n"
                f"Gracias por tu pregunta. He registrado tu consulta y "
                f"en breve un docente se comunicar√° contigo para brindarte "
                f"la ayuda espec√≠fica que necesitas.\n\n"
                f"üìù Tu consulta: \"{mensaje}\"\n"
                f"‚è∞ Registrada a las: {datetime.datetime.now().strftime('%H:%M')}\n\n"
                f"Mientras tanto, puedes:\n"
                f"‚Ä¢ Explorar las materias disponibles usando los botones\n"
                f"‚Ä¢ Hacer preguntas sobre temas que s√≠ puedo ayudarte\n"
                f"‚Ä¢ Revisar los consejos de estudio\n\n"
                f"¬°Gracias por tu paciencia!")

    def ejecutar(self):
        self.ventana.mainloop()

# Ejecutamos la aplicaci√≥n
if __name__ == "__main__":
    asistente = AsistenteVirtual()
    asistente.ejecutar()